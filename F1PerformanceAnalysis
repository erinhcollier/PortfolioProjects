CREATE TABLE circuits (
    circuitId INT PRIMARY KEY, 
	circuitRef VARCHAR(50),             
    [name] VARCHAR(100),                  
    [location] VARCHAR(50),             
    country VARCHAR(50),                
    lat FLOAT,            
    lng FLOAT,           
    alt INT                        
);


CREATE TABLE constructor_results (
    constructorResultsId INT PRIMARY KEY,  
    raceId INT NOT NULL,                  
    constructorId INT NOT NULL,           
    points INT,                
    [status] VARCHAR(50)                    
);


CREATE TABLE constructor_standings (
	constructorStandingsId INT PRIMARY KEY,
	raceId INT NOT NULL,
	constructorId INT NOT NULL,
	points INT,
	position INT,
	positionText VARCHAR(50), 
	wins INT
	);

CREATE TABLE constructors (
	constructorId INT PRIMARY KEY,
	constructorRef VARCHAR(50),
	[name] VARCHAR(50),
	nationality VARCHAR(50)
); 

CREATE TABLE driver_standings (
	driverStandingsId INT PRIMARY KEY, 
	raceId INT NOT NULL,
	driverId INT NOT NULL,
	points INT,
	position INT,
	positionText VARCHAR(50),
	wins INT
	); 

CREATE TABLE drivers (
	driverId INT PRIMARY KEY,
	driverRef VARCHAR(50),
	number VARCHAR(50),  -- alter this to an int
	code VARCHAR(10),
	forename VARCHAR(50),
	surname VARCHAR(50), 
	dob DATE, 
	nationality VARCHAR(50),
	);


CREATE TABLE lap_times (
	raceId INT NOT NULL, 
	driverId INT NOT NULL, 
	lap INT,
	position INT,
	[time] VARCHAR(20),  
	milliseconds INT,
	); 

CREATE TABLE pit_stops (
	raceId INT NOT NULL,
	driverId INT NOT NULL,
	[stop] INT,
	lap INT, 
	[time] VARCHAR(20),
	duration VARCHAR(20),
	milliseconds INT, 
	); 


CREATE TABLE qualifying (
	qualifyId INT PRIMARY KEY,
	raceId INT NOT NULL,
	driverId INT NOT NULL,
	constructorID INT NOT NULL,
	number INT,
	position INT,
	q1 VARCHAR(20),
	q2 VARCHAR(20),
	q3 VARCHAR(20), 
	); 

CREATE TABLE races (
	raceId INT PRIMARY KEY,
	[year] INT,
	[round] INT,
	circuitID INT NOT NULL,
	[name] VARCHAR(100),
	[date] DATE,
	[time] VARCHAR(20), 
	fp1_date VARCHAR(20),
	fp1_time VARCHAR(20),
	fp2_date VARCHAR(20),
	fp2_time VARCHAR(20),
	fp3_date VARCHAR (20), 
	fp3_time VARCHAR(20),
	quali_date VARCHAR(20),
	quali_time VARCHAR(20), 
	sprint_date VARCHAR(20),
	sprint_time VARCHAR(20), 
	); 

UPDATE races (
SET
	[time] = NULL,
	fp1_date = NULL, 
	fp1_time = NULL,
	fp2_date = NULL,
	fp2_time = NULL,
	fp3_date = NULL,
	fp3_time = NULL,
	quali_date = NULL,
	quali_time = NULL,
	sprint_date = NULL,
	sprint_time = NULL
WHERE
	[time] = '\N' OR fp1_date = '\N' OR fp1_time = '\N' OR fp2_date = '\N' OR fp3_date = '\N' OR fp3_time = '\N' OR quali_date = '\N' OR quali_time = '\N' OR sprint_date = '\N' OR sprint_time = '\N' 
); 

CREATE TABLE results (
	resultId INT PRIMARY KEY,
	raceId INT NOT NULL,
	driverID INT NOT NULL,
	constructorID INT NOT NULL,
	number VARCHAR(10),
	grid INT,
	position VARCHAR(10),
	positionText VARCHAR(10),
	positionOrder INT,
	points INT,
	laps INT,
	[time] VARCHAR(50),
	milliseconds VARCHAR(10),
	fastestLap VARCHAR(10), -- INT
	[rank] VARCHAR(10),
	fastestLapTime VARCHAR(50),
	fastestLapSpeed VARCHAR(50), 
	statusId INT NOT NULL
	); 

UPDATE results
SET 
	position = NULL, 
	[time] = NULL,
	milliseconds = NULL,
	fastestLap = NULL, 
	[rank] = NULL,
	fastestLapTime = NULL,
	fastestLapSpeed = NULL 
WHERE 
	position = '\N' OR [time] = '\N' OR milliseconds = '\N' OR fastestLap = '\N' OR [rank] = '\N' OR fastestLapTime = '\N' or fastestLapSpeed = '\N'

ALTER TABLE results
ALTER COLUMN position INT;

SELECT * FROM results

CREATE TABLE sprint_results (
	resultId INT NOT NULL,
	raceID INT NOT NULL,
	driverID INT NOT NULL,
	constructorID INT NOT NULL,
	number VARCHAR(10),
	grid INT,
	position VARCHAR(10), 
	positionText VARCHAR(10),
	positionOrder INT,
	points INT, 
	laps INT, 
	[time] VARCHAR(50),
	milliseconds VARCHAR(10),
	fastestLap VARCHAR(10), 
	fastestLapTime VARCHAR(50),
	statusId INT NOT NULL
	); 

CREATE TABLE [status] (
	statusId INT PRIMARY KEY,
	[status] VARCHAR(50)
	);



-- DRIVER ANALYSIS --

/* Q1. Driver Performance: points, podiums and wins: - case */ 

SELECT TOP 25
    CONCAT(d.forename, ' ', d.surname) AS Driver,
    SUM(rs.points) AS TotalPoints,
    COUNT(CASE WHEN rs.position = 1 THEN 1 END) AS Wins, 
    COUNT(CASE WHEN rs.position <= 3 THEN 1 END) AS Podiums -- what about driver standings table?? 
FROM 
    results rs  
    JOIN drivers d ON rs.driverId = d.driverId
GROUP BY 
    d.driverId, CONCAT(d.forename, ' ', d.surname)
ORDER BY 
    TotalPoints DESC;


/* Q2. Fastest Driver: fastest lap time per circuit - subquery */ 

SELECT 
    CONCAT(d.forename, ' ', d.surname) AS Driver,
    MIN(rs.fastestLapTime) AS FastestLapTime,
    c.name AS Circuit,
    CONCAT(c.location, ', ', c.country) AS Location
FROM 
    results rs
    JOIN races r ON rs.raceId = r.raceId
    JOIN circuits c ON r.circuitId = c.circuitId
    JOIN drivers d ON rs.driverId = d.driverId  
WHERE 
    rs.fastestLapTime = (
	SELECT MIN(rs2.fastestLapTime)
    FROM results rs2
    JOIN races r2 ON rs2.raceId = r2.raceId
    WHERE r2.circuitId = c.circuitId AND rs2.fastestLapTime IS NOT NULL
    )
GROUP BY 
    c.circuitId, c.name, d.driverId, CONCAT(d.forename, ' ', d.surname), c.location, c.country
ORDER BY 
    FastestLapTime ASC;


/* Q3. Driver Demographics: nationality share - percentage */ 

SELECT 
    nationality, 
    COUNT(driverId) AS TotalDrivers,
    CAST(ROUND((COUNT(driverId) * 100.0 /(SELECT COUNT(*) FROM drivers)), 2)
	AS DECIMAL(5, 2)) AS [Percentage]
FROM 
    drivers
GROUP BY 
    nationality
ORDER BY 
    [Percentage] DESC;






-- CONSTRUCTOR ANALYSIS --

/* Query 1. Constructor Dominance: rank over seasons - Partition by / CTE */

WITH ConstructorRank AS (
    SELECT 
        c.name AS Constructor,
        YEAR(r.date) AS Season,
        SUM(rs.points) AS TotalPoints,
        RANK() OVER (PARTITION BY YEAR(r.date) ORDER BY SUM(rs.points) DESC) AS Rank 
    FROM 
        results rs
        JOIN constructors c ON rs.constructorId = c.constructorId
        JOIN races r ON rs.raceId = r.raceId
    WHERE 
        YEAR(r.date) BETWEEN 2020 AND 2024  
    GROUP BY 
        c.constructorId, c.name, YEAR(r.date)
)
SELECT 
    Constructor,
    Season,
	TotalPoints,
    Rank,
    COALESCE(Rank - LAG(Rank) OVER (PARTITION BY Constructor ORDER BY Season), 0) AS RankChange
FROM 
    ConstructorRank
ORDER BY 
    Season DESC, 
	Rank ASC;


/* Query 2. driver retention: Years spent with constructor - joins / CTE */ 

WITH DriverRaceYears AS (
    SELECT 
        rs.driverId,
        CONCAT(d.forename, ' ', d.surname) AS Driver,
        rs.constructorId,
        c.name AS Constructor,
        MIN(r.year) AS FirstRace,
        MAX(r.year) AS LastRace
    FROM 
        results rs
        JOIN races r ON rs.raceId = r.raceId
        JOIN drivers d ON rs.driverId = d.driverId
        JOIN constructors c ON rs.constructorId = c.constructorId
    GROUP BY 
        rs.driverId, d.forename, d.surname, rs.constructorId, c.[name]
)
SELECT 
    Constructor,
    Driver,
    FirstRace,
    LastRace,
    LastRace - FirstRace AS YearsWithConstructor
FROM 
    DriverRaceYears
ORDER BY 
    YearsWithConstructor DESC;

/* Query 3. Constructor pit stops: pit stop duration & consistency (seconds) - Average, Variance*/

SELECT 
    c.name AS Constructor,
    ROUND(CAST(AVG(ps.milliseconds / 10000.0) AS DECIMAL(10, 2)), 2) AS AvgPitStop,
    ROUND(CAST(STDEV(ps.milliseconds / 10000.0) AS DECIMAL(10, 2)), 2) AS PitStopSD
FROM 
    pit_stops ps
    JOIN results rs ON ps.raceId = rs.raceId AND ps.driverId = rs.driverId
    JOIN constructors c ON rs.constructorId = c.constructorId
WHERE 
    ps.duration IS NOT NULL
GROUP BY 
    c.[name]
ORDER BY 
    AvgPitStop ASC;
















